import sys
import os
#variable initialization
from rouge_score import rouge_scorer

scorer = rouge_scorer.RougeScorer(['rouge2','rouge1', 'rougeL'], use_stemmer=True)

first2=0.0
last2=0.0
 
# Driver code
uu=0
v4=[]
v5=[]
v6=[]
v7=[]
count=0
countf=0
counta=0
countr=0
countp=0
countr1=0
countr2=0
counti=0
counts=0
k1=0.0
k2=0.0
k3=0.0
k4=0.0
k5=0.0
k6=0.0
k7=0.0
k8=0.0
maxi=-1.0
pos=0
#list of all possible summarization algorithms
a=["BERT","CaseSummarizer","ChineseGist","DELSumm","DSDR","KMM","LetSum","LexRankSummarizer","LsaSummarizer","LuhnSummarizer","MMR","ReductionSummarizer","SummaRuNNer/AttnRNN_F7_avr","SummaRuNNer/RNN_RNN_F7_avr","SummaRuNNer/CNN_RNN_F7_avr"]
t=os.listdir("Full-Text-segments/India/")

#loop over all summarization algorithms
#for j in range(0,1):

	#loop over all 50 files
for i in range(0,len(t)):
		
			#open a particular file and read
			file1 = open("Expert-Summaries/India/A2_processed"+'/'+t[i], 'r')
			Lines = file1.readlines()
#			print(Lines)
			Lines=Lines[0]
			Lines=Lines.split(".")
			v=[]
			v1=[]
			v4=[]
			v5=[]
			v6=[]
			v7=[]
			v=[]
			v1=[]
			p=""
			count = 0


			# read a line from a summarized document where the summarized text is generated by a algorithm
			for line in Lines:
				p=line.strip()
				#if p[-1]==".":
				#	v.append(p[:-1])
				#else:
				v.append(p)
			#print(v)


			#read a line from a file in the full text segments
			file1 = open("Full-Text-segments/India/"+t[i], 'r')
			Lines = file1.readlines()
 
			count = 0
			
			
			for line in Lines:
				p=line.strip()
				if p[-1]==".":
					v1.append(p[:-1])
				else:
					v1.append(p)
			

			#separate a line into sentence and label
			for l in range(0,len(v1)):
				u=v1[l]
				u=u.split("-->")
				u[0]=u[0].strip()
				if u[0][-1]==".":
					v4.append(u[0][:-1])
				else:
					v4.append(u[0])
				
				v5.append(u[1])
			#v4 contains sentence
			#v5 contains label
			totalfacts=0
			totalargument=0
			totalratio=0
			totalprecedent=0
			totallower=0
			totalpresent=0
			totalissue=0
			totalstatute=0


			for x2 in range(0,len(v5)):
				if v5[x2]==" Fact_Events" :
						totalfacts=totalfacts+1
				if v5[x2]==" Fact_Procedural" :
						totalfacts=totalfacts+1
				if v5[x2]==" Argument":
						totalargument=totalargument+1
				if v5[x2]==" Ratio of the decision":
						totalratio=totalratio+1
				if v5[x2]==" Precedent":
						totalprecedent=totalprecedent+1
				if v5[x2]==" Ruling by Lower Court":
						totallower=totallower+1
				if v5[x2]==" Ruling by Present Court":
						totalpresent=totalpresent+1
				if v5[x2]==" Issue":
						totalissue=totalissue+1
				if v5[x2]==" Statute":
						totalstatute=totalstatute+1
			uu=totalfacts+totalargument+totalratio+totalprecedent+totallower+totalpresent+totalissue+totalstatute
			#remove the punctuation characters and only store only alphanumeric characters
			#for x1 in range(0,len(v)):
			#	a_string=v[x1]
			#	alphanumeric=""
			#	for character in a_string:
			#		if character.isalnum():
			#			alphanumeric+=character
			#	v6.append(alphanumeric)


			#remove the punctuation characters and only store only alphanumeric characters
			#for x2 in range(0,len(v4)):
			#	a_string=v4[x2]
			#	alphanumeric=""
			#	for character in a_string:
			#		if character.isalnum():
			#			alphanumeric+=character
			#	v7.append(alphanumeric)
			v6=v
			v7=v4
#			print(v6)
#			print(v7)
			#first=0
			#last=0
			#first1=0
			#last1=0
			count=0
			countf=0
			counta=0
			countr=0
			countp=0
			countr1=0
			countr2=0
			counti=0
			counts=0
			#check whether the line present in the summary file is related to which rhetorical role
			for x1 in range(0,len(v6)):
				for x2 in range(0,len(v7)):
					scores1=scorer.score(v6[x1],v7[x2])
					if scores1['rouge2'][2]>maxi:
						maxi=scores1['rouge2'][2]
						pos=x2
				count=count+1
				print(v5[pos])
				if v5[pos]==" Fact_Events" or v5[pos]==" Fact_Procedural":
					countf=countf+1
				if v5[pos]==" Ratio of the decision":
					countr=countr+1
				if v5[pos]==" Argument":
					counta=counta+1
				if v5[pos]==" Precedent":
					countp=countp+1
				if v5[pos]==" Ruling by Lower Court":
					countr1=countr1+1
				if v5[pos]==" Ruling by Present Court":
					countr2=countr2+1
				if v5[pos]==" Issue":
					counti=counti+1
				if v5[pos]==" Statute":
					counts=counts+1
				#count=count+1
				#if v5[pos]==" Fact_Events" :
				#	countf=countf+1
				#elif v5[pos]==" Fact_Procedural" :
				#	countf=countf+1
				#elif v5[pos]==" Argument":
				#	counta=counta+1
				#elif v5[x2]==" Ratio of the decision":
				#	countr=countr+1
				#elif v5[x2]==" Precedent":
				#	countp=countp+1
				#elif v5[x2]==" Ruling by Lower Court":
				#	countr1=countr1+1
				#elif v5[x2]==" Ruling by Present Court":
				#	countr2=countr2+1
				#elif v5[x2]==" Issue":
				#	counti=counti+1
				#elif v5[x2]==" Statute":
				#	counts=counts+1
				uu=totalfacts+totalargument+totalratio+totalprecedent+totallower+totalpresent+totalissue+totalstatute
				maxi=-1.0
				#print(countf,counta,countr,countp,countr1,countr2,counti,counts)
				#pos=0
			#print(countf,counta,countr,countp,countr1,countr2,counti,counts)

			#print(totalfacts,totalargument,totalratio,totalprecedent,totalpresent,totallower,totalissue,totalstatute)
			if totalfacts!=0:
				k1=k1+(countf*1.0/totalfacts)
			if totalargument!=0:
				k2=k2+(counta*1.0/totalargument)
			if totalratio!=0:
				k3=k3+(countr*1.0/totalratio)
			if totalprecedent!=0:
				k4=k4+(countp*1.0/totalprecedent)
			if totallower!=0:
				k5=k5+(countr1*1.0/totallower)
			if totalpresent!=0:
				k6=k6+(countr2*1.0/totalpresent)
			if totalissue!=0:
				k7=k7+(counti*1.0/totalissue)
			if totalstatute!=0:
				k8=k8+(counts*1.0/totalstatute)

			countf=0
			counta=0
			countr=0
			countp=0
			countr1=0
			countr2=0
			counti=0
			counts=0
			print(count,len(v),uu,len(v1),len(v4),len(v5))
			print(k1,k2,k3,k4,k5,k6,k7,k8)
			#first1=(first*1.0)/(first+last)
			#last1=(last*1.0)/(first+last)
			#print(t[i])
			#print("Part in first half="+str(first1))
			#print("Part in second half="+str(last1))
			#first2=first2+first1
			#last2=last2+last1

print("Facts:-",k1/50.0)
print("Argument:-",k2/50.0)
print("Ratio of the decision:-",k3/50.0)
print("total precedent:-",k4/50.0)
print("ruling by lower court",k5/50.0)
print("ruling by present court",k6/50.0)
print("issues",k7/50.0)
print("statutes",k8/50.0)
