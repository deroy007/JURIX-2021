import sys
import os
#variable initialization
uu=0
v4=[]
v5=[]
v6=[]
v7=[]
count=0
countf=0
counta=0
countr=0
countp=0
countr1=0
countr2=0
counti=0
counts=0
k1=0.0
k2=0.0
k3=0.0
k4=0.0
k5=0.0
k6=0.0
k7=0.0
k8=0.0


#list of all possible summarization algorithms
a=["BERT","CaseSummarizer","ChineseGist","DELSumm","DSDR","KMM","LetSum","LexRankSummarizer","LsaSummarizer","LuhnSummarizer","MMR","ReductionSummarizer","SummaRuNNer/AttnRNN_F7_avr","SummaRuNNer/RNN_RNN_F7_avr","SummaRuNNer/CNN_RNN_F7_avr"]
t=os.listdir("Full-Text-segments/India/")

#loop over all summarization algorithms
for j in range(0,15):

	#loop over all 50 files
	for i in range(0,len(t)):
		
			#open a particular file and read
			file1 = open("Algo-Summaries/India/"+a[j]+'/'+t[i], 'r')
			Lines = file1.readlines()

			v=[]
			v1=[]
			p=""
			count = 0


			# read a line from a summarized document where the summarized text is generated by a algorithm
			for line in Lines:
				p=line.strip()
				if p[-1]==".":
					v.append(p[:-1])
				else:
					v.append(p)
			


			#read a line from a file in the full text segments
			file1 = open("Full-Text-segments/India/"+t[i], 'r')
			Lines = file1.readlines()
 
			count = 0
			
			
			for line in Lines:
				p=line.strip()
				if p[-1]==".":
					v1.append(p[:-1])
				else:
					v1.append(p)
			

			#separate a line into sentence and label
			for l in range(0,len(v1)):
				u=v1[l]
				u=u.split("-->")
				u[0]=u[0].strip()
				if u[0][-1]==".":
					v4.append(u[0][:-1])
				else:
					v4.append(u[0])
				
				v5.append(u[1])
			#v4 contains sentence
			#v5 contains label
			
			
			#remove the punctuation characters and only store only alphanumeric characters
			for x1 in range(0,len(v)):
				a_string=v[x1]
				alphanumeric=""
				for character in a_string:
					if character.isalnum():
						alphanumeric+=character
				v6.append(alphanumeric)


			#remove the punctuation characters and only store only alphanumeric characters
			for x2 in range(0,len(v4)):
				a_string=v4[x2]
				alphanumeric=""
				for character in a_string:
					if character.isalnum():
						alphanumeric+=character
				v7.append(alphanumeric)

			totalfacts=0
			totalargument=0
			totalratio=0
			totalprecedent=0
			totallower=0
			totalpresent=0
			totalissue=0
			totalstatute=0


			for x2 in range(0,len(v5)):
				if v5[x2]==" Fact_Events" :
						totalfacts=totalfacts+1
				if v5[x2]==" Fact_Procedural" :
						totalfacts=totalfacts+1
				if v5[x2]==" Argument":
						totalargument=totalargument+1
				if v5[x2]==" Ratio of the decision":
						totalratio=totalratio+1
				if v5[x2]==" Precedent":
						totalprecedent=totalprecedent+1
				if v5[x2]==" Ruling by Lower Court":
						totallower=totallower+1
				if v5[x2]==" Ruling by Present Court":
						totalpresent=totalpresent+1
				if v5[x2]==" Issue":
						totalissue=totalissue+1
				if v5[x2]==" Statute":
						totalstatute=totalstatute+1


			

			#check whether the line present in the summary file is related to which rhetorical role
			for x1 in range(0,len(v6)):
				for x2 in range(0,len(v7)):
					if v6[x1]==v7[x2]:
						count=count+1
						if v5[x2]==" Fact_Events" :
							#print("facts lines:-",x2)
							countf=countf+1
						if v5[x2]==" Fact_Procedural" :
							#print("facts lines:-",x2)
							countf=countf+1
						if v5[x2]==" Argument":
							counta=counta+1
						if v5[x2]==" Ratio of the decision":
							countr=countr+1
						if v5[x2]==" Precedent":
							countp=countp+1
						if v5[x2]==" Ruling by Lower Court":
							#print("lower court lines:-",x2)
							countr1=countr1+1
						if v5[x2]==" Ruling by Present Court":
							countr2=countr2+1
						if v5[x2]==" Issue":
							counti=counti+1
						if v5[x2]==" Statute":
							counts=counts+1
			#print("------------------------------------")
			#print the fraction of the rhetorical roles by every summarization algorithm
			uu=totalfacts+totalargument+totalratio+totalpresent+totallower+totalissue+totalstatute+totalprecedent
			#if t[i]=="1953_L_1.txt":
			#	print("Method name:-",a[j])
			#	if totalfacts!=0:
			#	if totalargument!=0:
			#		print("Fraction of Argument="+str(counta/totalargument))
			#	if totalratio!=0:
			#		print("Fraction of Ratio of the decision="+str(countr/totalratio))
			#	if totalprecedent!=0:
			#		print("Fraction of precedent="+str(countp/totalprecedent))
			#	if totallower!=0:
			#		print("Fraction of Ruling by Lower court="+str(countr1/totallower))
			#	if totalpresent!=0:
			#		print("Fraction of Ruling by present court="+str(countr2/totalpresent))
			#	if totalissue!=0:
			#		print("Fraction of Issues="+str(counti/totalissue))
			#	if totalstatute!=0:
			#		print("Fraction of Statute="+str(counts/totalstatute))
			#	print(count,len(v),uu,len(v1),len(v4),len(v5))
			#	print("-------------------------------------")

			count=0
			v4=[]
			v5=[]
			v6=[]
			v7=[]
			v=[]
			v1=[]
			uu=countf+counta+countr+countp+countr1+countr2+counti+counts
			
			#calculation of fraction of rhetorical role in the summary generated by a summarization algorithm.
			if totalfacts!=0:
				k1=k1+(countf*1.0/float(totalfacts))

			if totalargument!=0:
				k2=k2+(counta*1.0/float(totalargument))
			if totalratio!=0:
				k3=k3+(countr*1.0/float(totalratio))
			if totalprecedent!=0:
				k4=k4+(countp*1.0/float(totalprecedent))
			if totallower!=0:
				k5=k5+(countr1*1.0/float(totallower))
			if totalpresent!=0:
				k6=k6+(countr2*1.0/float(totalpresent))
			if totalissue!=0:
				k7=k7+(counti*1.0/float(totalissue))
			if totalstatute!=0:
				k8=k8+(counts*1.0/float(totalstatute))

			countf=0
			counta=0
			countr=0
			countp=0
			countr1=0
			countr2=0
			counti=0
			counts=0
			
			uu=0

	#print the fraction of the rhetorical roles by every summarization algorithm after taking aggregate over 50 documents
	print("Method Name:-")
	print(a[j])
	print("Fraction of facts="+str(k1/50.0))
	print("Fraction of Argument="+str(k2/50.0))
	print("Fraction of Ratio of the decision="+str(k3/50.0))
	print("Fraction of precedent="+str(k4/50.0))
	print("Fraction of Ruling by Lower court="+str(k5/50.0))
	print("Fraction of Ruling by present court="+str(k6/50.0))
	print("Fraction of Issues="+str(k7/50.0))
	print("Fraction of Statute="+str(k8/50.0))
	print((k1/50.0)+(k2/50.0)+(k3/50.0)+(k4/50.0)+(k5/50.0)+(k6/50.0)+(k7/50.0)+(k8/50.0))
	print("---------------------------------------")
	
	k1=0.0
	k2=0.0
	k3=0.0
	k4=0.0
	k5=0.0
	k6=0.0
	k7=0.0
	k8=0.0